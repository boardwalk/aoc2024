#![feature(array_windows)]
use anyhow::Error;
use ndarray::Array2;
use std::collections::HashSet;

const PART_TWO: bool = false;

struct Fence {
    // pairs of coordinates making up line segments
    // this is a loop. the last segment connects to the first
    points: Vec<(i64, i64)>,
    plots: HashSet<(i64, i64)>,
}

fn dist_sq(p1: (i64, i64), p2: (i64, i64)) -> i64 {
    let row_diff = p2.0 - p1.0;
    let col_diff = p2.1 - p1.1;

    row_diff * row_diff + col_diff * col_diff
}

// fn get_delta(p1: (i64, i64), p2: (i64, i64)) -> (i64, i64) {
//     (p2.0 - p1.0, p2.1 - p1.1)
// }

// fn get_mid_pt(p1: (i64, i64), p2: (i64, i64)) -> (i64, i64) {
//     println!("midpt of {p1:?}, {p2:?}");
//     let d = get_delta(p1, p2);
//     assert!(d.0 % 2 == 0 && d.1 % 2 == 0);
//     (p1.0 + d.0 / 2, p1.1 + d.1 / 2)
// }

fn dot_prod(p1: (i64, i64), p2: (i64, i64)) -> i64 {
    p1.0 * p2.0 + p1.1 * p2.1
}

// we have an existing line seg and we're proposing inserting a new one
// this evaluates if inserting new_begin/new_end is ok
fn segments_ok(
    old_begin: (i64, i64),
    old_end: (i64, i64),
    new_begin: (i64, i64),
    new_end: (i64, i64),
) -> bool {
    let old_dot = dot_prod(old_begin, old_end);
    let new_dot = dot_prod(new_begin, new_end);
    // signedness of dot prod must not change
    if new_dot.is_negative() != old_dot.is_negative() {
        return false;
    }

    // length of segment must be right
    dist_sq(new_begin, new_end) == 1
}

impl Fence {
    pub fn new((row, col): (i64, i64)) -> Self {
        // println!("new fence at {row} {col}");
        let mut points = Vec::new();
        // the initial fence is a 4 sided box around a plot
        points.push((row - 1, col - 1));
        points.push((row - 1, col + 1));
        points.push((row + 1, col + 1));
        points.push((row + 1, col - 1));

        let mut plots = HashSet::new();
        plots.insert((row, col));

        Self { points, plots }
    }

    pub fn insert(&mut self, (row, col): (i64, i64)) {
        if self.plots.contains(&(row, col)) {
            return;
        }
        self.plots.insert((row, col));

        // println!("insert {row}, {col}");

        for delta in [
            (-1, 0),
            (-1, 1),
            (0, 1),
            (1, 1),
            (1, 0),
            (1, -1),
            (0, -1),
            (-1, -1),
        ] {
            let new_end = (row + delta.0, col + delta.1);

            for old_begin_idx in 0..self.points.len() {
                // cycle around at the end to the beginning
                let old_end_idx = (old_begin_idx + 1) % self.points.len();

                let old_begin = self.points[old_begin_idx];
                let old_end = self.points[old_end_idx];

                if segments_ok(old_begin, old_end, old_begin, new_end) {
                    self.points.insert(old_begin_idx + 1, new_end);
                    return;
                }
            }
        }

        panic!("i couldn't find a place to put this");
    }

    fn area(&self) -> usize {
        self.plots.len()
    }

    fn num_sides(&self) -> usize {
        assert!(false);
        let mut num_sides = 0;
        let mut last_dir: Option<(i64, i64)> = None;

        for [p1, p2] in self.points.array_windows() {
            let this_dir = (p2.0 - p1.0, p2.1 - p1.1);
            // let row_diff = p2.0 - p1.0;
            // let col_diff = p2.1 - p1.1;

            // // check for odd line length
            // let dist_sq = row_diff * row_diff + col_diff * col_diff;
            // if dist_sq != 4 {
            //     panic!("odd length line seg")
            // }

            if Some(this_dir) != last_dir {
                num_sides += 1;
                last_dir = Some(this_dir);
            }
        }
        // above loop misses "closing the loop", account for this
        num_sides += 1;

        num_sides
    }

    fn perimeter(&self) -> usize {
        // simply number of line segments

        self.points.len()
    }
}

fn to_signed((row, col): (usize, usize)) -> Result<(i64, i64), Error> {
    let row = i64::try_from(row)?;
    let col = i64::try_from(col)?;
    Ok((row, col))
}

fn to_unsigned((row, col): (i64, i64)) -> Result<(usize, usize), Error> {
    let row = usize::try_from(row)?;
    let col = usize::try_from(col)?;
    Ok((row, col))
}

fn fence_region(plots: &Array2<char>, seen: &mut Array2<bool>, start: (i64, i64)) -> Fence {
    let region_plant = plots[to_unsigned(start).unwrap()];
    println!("fencing region {region_plant} at {start:?}");
    let mut work: Vec<(i64, i64)> = Vec::new();
    work.push(start);

    let (nrows, ncols) = plots.dim();

    let mut fence = Fence::new(start);

    while let Some(pos) = work.pop() {
        let Some(upos) = to_unsigned(pos).ok() else {
            continue;
        };
        // bound check
        if upos.0 >= nrows || upos.1 >= ncols {
            continue;
        }

        // plant check
        if plots[upos] != region_plant {
            continue;
        }

        // seen check
        if seen[upos] {
            continue;
        }

        seen[upos] = true;

        fence.insert(pos);

        for (dr, dc) in tools::DELTAS {
            let new_pos = (pos.0 + dr, pos.1 + dc);
            work.push(new_pos);
        }
    }

    fence
}

fn main() -> Result<(), Error> {
    let plots = tools::load_grid(std::io::stdin().lock())?;

    let mut seen: Array2<bool> = Array2::default(plots.raw_dim());

    let mut total_cost = 0;

    for (start, plant) in plots.indexed_iter() {
        if !seen[start] {
            let start = to_signed(start).unwrap();
            let fence = fence_region(&plots, &mut seen, start);

            if PART_TWO {
                total_cost += fence.area() * fence.num_sides();
                println!(
                    "(p2) region {} has area {}, perimeter {}",
                    plant,
                    fence.area(),
                    fence.num_sides()
                );
            } else {
                total_cost += fence.area() * fence.perimeter();
                println!(
                    "(p1) region {} has area {}, perimeter {}",
                    plant,
                    fence.area(),
                    fence.perimeter()
                );
            }
        }
    }

    println!("{total_cost}");
    Ok(())
}
